// Object for creating and writing to a .mat file.

#include "debugprint.h"
#include "matfile.h"

#include <stdint.h>

// Size of the text portion of the header.
#define TEXT_HEADER_SIZE    124

// The text that goes into the text header.
#define TEXT_HEADER_TEXT    "MAT-file generated by GPCM training program, built "

// Create file with specified name and prepare for opening.
GPCMMatFile::GPCMMatFile(
    std::string filename                    // Name of file to write to.
    ) : file(filename.c_str(),std::ios_base::binary), GPCMMatWriter(file)
{
    // First, write the 124 byte text field.
    uint8_t textheader[TEXT_HEADER_SIZE];
    memset(textheader,0,TEXT_HEADER_SIZE);

    // Copy text into the text header.
    std::ostringstream oss;
    oss << TEXT_HEADER_TEXT << __DATE__ << " " << __TIME__;
    assert(oss.str().length() < TEXT_HEADER_SIZE);

    // Write the header.
    writestream.write((const char*)oss.str().c_str(),oss.str().length());
    writestream.write((char*)textheader,TEXT_HEADER_SIZE-oss.str().length());

    // Write version.
    uint16_t version = 0x0100;
    writestream.write((char*)&version,2);

    // Write endian order.
    const char *littleend = "IM";
    const char *bigend = "MI";
    uint32_t testno = 1;
    char *chk = (char*)&testno;
    if (chk[0] == 1)
        writestream.write((char*)littleend,2);
    else
        writestream.write((char*)bigend,2);
}

// Destructor - close file & clean up.
GPCMMatFile::~GPCMMatFile()
{
    file.close();
}
